set.seed(2254)
ts = arima.sim(model=c(2,1,2))
ts = arima.sim(c(2,1,2))
ts = arima.sim(n=500, model=list(order=c(2,1,2), ar=c(0.6,-0.2), ma=c(-0.7,-01),sd=sqrt(6)) + 22
ts
ts = arima.sim(n=500, model=list(order=c(2,1,2), ar=c(0.6,-0.2), ma=c(-0.7,-01)),sd=sqrt(6)) + 22
ts
# part a
eacf(ts)
library(forecast)
library(tidyquant)
library(aTSA)
#QUESTION 2
set.seed(2254)
ts = arima.sim(n=500, model=list(order=c(2,1,2), ar=c(0.6,-0.2), ma=c(-0.7,-01)),sd=sqrt(6)) + 22
ts
# part a
eacf(ts)
library(TSA)
# part a
eacf(ts)
# part a
plot(ts)
ndiffs(ts)
eacf(diff(ts))
auto.arima(ts)
plot(diff(ts))
# part a
plot(ts)
# part a
plot(ts)
plot(diff(ts))
# part a
plot(ts)
ndiffs(ts)
source('~/.active-rstudio-document', echo=TRUE)
#part b
#ML estimation
mod_ML = auto.arima(ts, method='ML')
#CLS estimation
mod_CLS = auto.arima(ts, mehtod='CSS')
#CLS estimation
mod_CLS = auto.arima(ts, method='CSS')
#UCLS estimation
mod_UCL = auto.arima(ts, method='UCSS')
#UCLS estimation
mod_UCL = auto.arima(ts, method='CSS-ML')
mod_ML
mod_CLS
mod_UCL
#Problem 4
getSymbols('GOOGL', from='2020-04-29', to='2021-04-29')
names(GOOGL)
plot(GOOGL$GOOGL.Close)
#Data is not stationary, with an increasing mean. Sudden jumps in stock price
#indicate that autocorrelation might not be only dependent on distance between points,
#but the entire trend looks approximately linear, so the only violation of stationarity
#might be a moving mean.
adf.test(ts)
ts = GOOGL$GOOGL.Close
#Data is not stationary, with an increasing mean. Sudden jumps in stock price
#indicate that autocorrelation might not be only dependent on distance between points,
#but the entire trend looks approximately linear, so the only violation of stationarity
#might be a moving mean.
adf.test(ts)
#adf test strongly indicates that the data is NOT stationary.
ndiffs(test)
#adf test strongly indicates that the data is NOT stationary.
ndiffs(ts)
adf.test(diff(ts))
#adf test strongly indicates that the data is NOT stationary.
ndiffs(ts)
plot(diff(ts))
adf.test(diff(ts))
plot(diff(diff(ts)))
adf.test(diff(diff(ts)))
ts = arima.sim(n=500, model=list(order=c(2,1,2), ar=c(0.6,-0.2), ma=c(-0.7,-01)),sd=sqrt(6)) + 22
#Data is not stationary, with an increasing mean. Sudden jumps in stock price
#indicate that autocorrelation might not be only dependent on distance between points,
#but the entire trend looks approximately linear, so the only violation of stationarity
#might be a moving mean.
adf.test(ts)
adf.test(diff(diff(ts)))
ts = GOOGL$GOOGL.Close
#Data is not stationary, with an increasing mean. Sudden jumps in stock price
#indicate that autocorrelation might not be only dependent on distance between points,
#but the entire trend looks approximately linear, so the only violation of stationarity
#might be a moving mean.
adf.test(ts)
#adf test strongly indicates that the data is NOT stationary.
ndiffs(ts)
plot(diff(diff(ts)))
plot(diff(ts)))
plot(diff(ts))
#data now looks approximatley stationary, but still has large jumps
adf.test(diff(ts))
#adf still strongly suggests data is not stationary
auto.arima(ts)
#adf still strongly suggests data is not stationary
acf(ts)
#adf still strongly suggests data is not stationary
acf(diff(ts))
#adf still strongly suggests data is not stationary
acf(na.omit(diff(ts)))
#data now looks approximatley stationary, but still has large jumps
adf.test(na.omit(diff(diff(ts))))
acf(na.omit(diff(diff(ts))))
acf(na.omit(diff(diff(diff(ts)))))
#d
eacf(na.omit(diff(ts)))
#adf still strongly suggests data is not stationary
acf(na.omit(diff(ts)))
#extended autocorrelation function suggests ARIMA(
auto.arima(ts)
arima(ts, order=(0,1,1))
arima(ts, order=c(0,1,1))
arima(ts, order=c(0,1,0))
auto.arima(ts)
names(arima(ts, order=c(0,1,1)))
mod2 = auto.arima(ts)
plot(mod1$Residuals)
plot(mod1)
mod1 = arima(ts, order=c(0,1,1))
mod2 = auto.arima(ts)
plot(mod1$residuals)
plot(mod2$residuals)
plot(mod1$residuals)
plot(mod2$residuals)
plot(mod1$residuals)
mean(mod1$residuals)
mean(mod2$residuals)
#the auto arima model seems to be best
mod = auto.arima(ts)
#d
mod = auto.arima(ts, method='ML')
#e
Box.test(mod$residuals, type=c('Box-Pierce'))
Box.test(mod$residuals, type=c('Ljung-Box'))
