library(arima)
arima
arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
#Problem 2
set_seed(1224)
#Problem 2
set.seed(1224)
arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
#Problem 2
set.seed(1224)
arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
#Problem 2
set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
#Problem 2
set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
#Problem 2
set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
library(forecast)
ndiffs(ts)
auto.arima(ts)
ts
#Problem 2
set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
library(forecast)
library(forecast)
#Problem 2
set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
library(forecast)
#Problem 2
set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ndiffs(ts)
auto.arima(ts)
ts
acf(ts)
acf(diff(ts))
acf(diff(diff(ts)))
acf(diff(diff(diff(ts))))
auto.arima(ts)
#part b
arima(ts, order=(1,3,1), method='ML')
#part b
arima(ts, order=c(1,3,1), method='ML')
#Problem 2
#part a
set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ndiffs(ts)
auto.arima(ts)
acf(ts)
acf(diff(ts))
acf(diff(diff(ts)))
acf(diff(diff(diff(ts))))
#part b
arima(ts, order=c(1,3,1), method='ML')
#Problem 2
#part a
#set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ndiffs(ts)
auto.arima(ts)
acf(ts)
acf(diff(ts))
acf(diff(diff(ts)))
acf(diff(diff(diff(ts))))
#part b
arima(ts, order=c(1,3,1), method='ML')
#Problem 2
#part a
#set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ndiffs(ts)
auto.arima(ts)
acf(ts)
acf(diff(ts))
acf(diff(diff(ts)))
acf(diff(diff(diff(ts))))
#part b
arima(ts, order=c(1,3,1), method='ML')
#Problem 2
#part a
set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ndiffs(ts)
auto.arima(ts)
acf(ts)
acf(diff(ts))
acf(diff(diff(ts)))
acf(diff(diff(diff(ts))))
#part b
arima(ts, order=c(1,3,1), method='ML')
arima(ts, order=c(1,3,1), method='CSS')
arima(ts, order=c(1,3,1), method='CSS-ML')
ts
#Problem 2
#part a
set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
ts
#Problem 2
#part a
set.seed(1223)
ts
#Problem 2
#part a
set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ts
#Problem 2
#part a
set.seed(4)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ts
ndiffs(ts)
auto.arima(ts)
acf(ts)
acf(diff(ts))
acf(diff(diff(ts)))
acf(diff(diff(diff(ts))))
#part b
arima(ts, order=c(1,3,1), method='ML')
arima(ts, order=c(1,3,1), method='CSS')
arima(ts, order=c(1,3,1), method='CSS-ML')
#Problem 2
#part a
set.seed(1224)
ts=arima.sim(n=200, list(order=c(1,3,1), ar=0.6, ma=-0.7, sd=sqrt(10))) + 100
plot(ts)
ts
ndiffs(ts)
auto.arima(ts)
acf(ts)
acf(diff(ts))
acf(diff(diff(ts)))
acf(diff(diff(diff(ts))))
#part b
arima(ts, order=c(1,3,1), method='ML')
arima(ts, order=c(1,3,1), method='CSS')
arima(ts, order=c(1,3,1), method='CSS-ML')
#question 4
library(tidyquant)
getSymbols('AAPL', from='2020-04-27', to='2021-04-27')
head(APPL)
head(AAPL)
ts.plot(APPL$AAPL.Close)
ts.plot(AAPL$AAPL.Close)
#b
library(aTSA)
install.packages("aTSA")
#b
library(aTSA)
adf.test(ts)
ts = AAPL$AAPL.Close
#b
library(aTSA)
adf.test(ts)
auto.arima(ts)
fit = auto.arima(ts)
manes(fit)
names(fit)
box.test(fit$residuals)
Box.test(fit$residuals)
Box.test(fit$residuals, type='Ljung-Box')
