#Q2
set.seed(1224)
ts = arima.sim(list(order=(1,3,1), ma=-0.7, ar=0.6), sd=sqrt(10)) + 100
ts
ts = arima.sim(list(order=(1,3,1), ma=-0.7, ar=0.6), sd=sqrt(10)) + 100
ts = arima.sim(list(order=c(1,3,1), ma=-0.7, ar=0.6), sd=sqrt(10)) + 100
ts = arima.sim(list(order=c(1,3,1), ma=-0.7, ar=0.6), sd=sqrt(10), n=200) + 100
ts
#Q2
set.seed(1224)
ts = arima.sim(list(order=c(1,3,1), ma=-0.7, ar=0.6), sd=sqrt(10), n=200) + 100
ts
ts_mod = auto.arima(ts)
ts_mod = auto.arima(ts)
ts_mod = auto.arima(ts)
#Q2
library(forecast)
set.seed(1224)
ts = arima.sim(list(order=c(1,3,1), ma=-0.7, ar=0.6), sd=sqrt(10), n=200) + 100
ts
ts_mod = auto.arima(ts)
ts_mod
ndiff(ts)
ndiffs(ts)
#using CSS method
arima(ts, order=c(1,3,1), method='CSS')
#using CSS method
arima(ts, order=c(2,2,0), method='CSS')
#using unconditional least squares
arima(ts, order=c(2,2,0), method = 'CSS-ML')
#using Maximum Likelihood
arima(ts, order=c(2,2,0), method='ML')
#using unconditional least squares
arima(ts, order=c(2,2,0), method = 'CSS-ML')
#using Maximum Likelihood
arima(ts, order=c(2,2,0), method='ML')
#using Maximum Likelihood
arima(ts, order=c(2,2,0), method='ML')
#using unconditional least squares
arima(ts, order=c(2,2,0), method = 'CSS-ML')
#using CSS method
arima(ts, order=c(2,2,0), method='CSS')
#using unconditional least squares
arima(ts, order=c(2,2,0), method = 'CSS-ML')
#using Maximum Likelihood
arima(ts, order=c(2,2,0), method='ML')
library(quantmod)
getSymbol('AAPL')
head(AAPL)
getSymbol('AAPL')
library(quantmod)
getSymbol('AAPL')
getSymbols('AAPL')
head(AAPL)
ts = APPL$APPL.Close
ts = AAPL$AAPL.Close
plot(ts)
plot(log(ts))
plot(diff(ts))
plot(diff(diff(ts)))
plot(diff(diff(diff(ts))))
ndiffs(ts)
#b Perform a test for stationarity
plot(acf(ts))
#b Perform a test for stationarity
library(tseries)
adf.test(ts)
#The output strongly suggests that the null hypothesis holds and the data is not
#stationary
ndiffs(ts)
adf.test(diff(diff(ts)))
adf.test(na.omit(diff(diff(ts))))
#c Find the best fitting ARIMA Model for these data
mod = auto.arima(ts)
mod
#d Find the parameters of the best ARIMA model using ML and parametric bootstrapping
mod2 = auto.arima(ts, method='ML')
mod2
Box.test(mod2$residuals, type="Box-Pierce")
# we cannot conclude IID residuals based off of this test with an alpha of 0.05
Box.test(mod3$residuals, type='Ljung-Box')
# we cannot conclude IID residuals based off of this test with an alpha of 0.05
Box.test(mod2$residuals, type='Ljung-Box')
acf(mod2)
acf(ts)
x = acf(diff(diff(ts)))
x = acf(na.omit(diff(diff(ts))))
x
